---
import { BarChart } from "../../components/BarChart";
import { Bracket } from "../../components/Bracket";
import Layout from "../../layouts/Layout.astro";
import { getWinsByPlayer } from "../../matchupDataUtils/getWinsByPlayer";
import { getVotesByPlayer } from "../../matchupDataUtils/getVotesByPlayer";
import { getJudgeVotesByPlayer } from "../../matchupDataUtils/getJudgeVotesByPlayer";
import { getOneVoteByPlayer } from "../../matchupDataUtils/getOneVoteByPlayer";
import { buildBracket } from "../../matchupDataUtils/buildBracket";
import { getVotesByPick } from "../../matchupDataUtils/getVotesByPick";
import woodstockBracket from "../../matchUpData/woodstockBracket";
import woodstockMatchups from "../../matchUpData/woodstockMatchups";
import woodstockPicks from "../../matchUpData/woodstockPicks";
import metalPicks from "../../matchUpData/metalPicks";
import metalBracket from "../../matchUpData/metalBracket";
import metalMatchups from "../../matchUpData/metalMatchups";
import videoGameOSTPicks from "../../matchUpData/videoGameOSTPicks";
import videoGameOSTMatchups from "../../matchUpData/videoGameOSTMatchups";
import videoGameOSTBracket from "../../matchUpData/videoGameOSTBracket";
import classicRockBracket from "../../matchUpData/classicRockBracket";
import classicRockPicks from "../../matchUpData/classicRockPicks";
import classicRockMatchups from "../../matchUpData/classicRockMatchups";
import musicalsBracket from "../../matchUpData/musicalsBracket";
import musicalsPicks from "../../matchUpData/musicalsPicks";
import musicalsMatchups from "../../matchUpData/musicalsMatchups";


export async function getStaticPaths() {
  return [
    {
      params: { matchups: undefined },
      props: {
        title: "Musicals",
        bracketSkeleton: musicalsBracket,
        pickData: musicalsPicks,
        matchupData: musicalsMatchups,
      },
    },
    {
      params: { matchups: "classic-rock" },
      props: {
        title: "Classic Rock",
        bracketSkeleton: classicRockBracket,
        pickData: classicRockPicks,
        matchupData: classicRockMatchups,
      },
    },
    {
      params: { matchups: "video-game-ost" },
      props: {
        title: "Video Game OST",
        bracketSkeleton: videoGameOSTBracket,
        pickData: videoGameOSTPicks,
        matchupData: videoGameOSTMatchups,
      },
    },
    {
      params: { matchups: "metal" },
      props: {
        title: "Metal",
        bracketSkeleton: metalBracket,
        pickData: metalPicks,
        matchupData: metalMatchups,
      },
    },
    {
      params: { matchups: "woodstock99" },
      props: {
        title: "Woodstock 99",
        bracketSkeleton: woodstockBracket,
        pickData: woodstockPicks,
        matchupData: woodstockMatchups,
      },
    },
  ];
}

const { title, bracketSkeleton, pickData, matchupData } = Astro.props;

const bracketData = buildBracket(bracketSkeleton, pickData, matchupData);
const winsByPlayer = getWinsByPlayer(pickData, matchupData);
const totalMatchUps = matchupData.length;
const votesByPlayer = getVotesByPlayer(pickData, matchupData);
const oneVoteWinsByPlayer = getOneVoteByPlayer(
  pickData,
  matchupData,
  "winner"
);
const totalOneVoteWins = oneVoteWinsByPlayer.reduce(
  (wins, player) => wins + player.yValue,
  0
);
const vgOstOneVoteLossesByPlayer = getOneVoteByPlayer(
  pickData,
  matchupData,
  "loser"
);
const vgOstJudgeWinVotesByPlayer = getJudgeVotesByPlayer(
  pickData,
  matchupData,
  "winner"
);
const vgOstJudgeLossVotesByPlayer = getJudgeVotesByPlayer(
  pickData,
  matchupData,
  "loser"
);

const vgOSTVotesByPick = getVotesByPick(pickData, matchupData);
---

<Layout title="Matchups">
  <main class="container">
    <header>
      <h1>Data visualization fun for Matchups</h1>
      <h3>{title}</h3>
    </header>
    <Bracket client:only="react" data={bracketData} />
    <div class="chart-grid">
      <article>
        <h5>Total Wins <span>{`Matchups Played: ${totalMatchUps}`}</span></h5>
        <BarChart client:only="react" data={winsByPlayer} />
      </article>
      <article>
        <h5>Total Votes</h5>
        <BarChart client:only="react" data={votesByPlayer} />
      </article>
      <article>
        <h5>
          One Vote Wins <span
            >{
              `Total (%): ${totalOneVoteWins} (${Math.round(
                (totalOneVoteWins / totalMatchUps) * 100
              )}%)`
            }</span
          >
        </h5>
        <BarChart
          client:only="react"
          data={oneVoteWinsByPlayer}
          ticks={5}
        />
      </article>
      <article>
        <h5>One Vote Losses</h5>
        <BarChart
          client:only="react"
          data={vgOstOneVoteLossesByPlayer}
          ticks={5}
        />
      </article>
      <article>
        <h5>Judge Win Votes</h5>
        <BarChart
          client:only="react"
          data={vgOstJudgeWinVotesByPlayer}
          ticks={3}
        />
      </article>
      <article>
        <h5>Judge Loss Votes</h5>
        <BarChart
          client:only="react"
          data={vgOstJudgeLossVotesByPlayer}
          ticks={2}
        />
      </article>
    </div>
    <article>
      <h5>Votes By Pick</h5>
      <BarChart
        client:only="react"
        data={vgOSTVotesByPick}
        margin={{ top: 20, bottom: 80, left: 30, right: 40 }}
      />
    </article>
  </main>
</Layout>

<style>
  h6 {
    margin-bottom: 0.5rem;
  }

  span {
    font-size: 0.6rem;
    padding-left: 0.5rem;
  }

  article {
    margin-top: 0.5rem;
    margin-bottom: 1rem;
    padding-top: 1rem;
    padding-bottom: 1rem;
  }

  .chart-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(340px, 1fr));
    gap: 10px;
  }

  @media (min-width: 1200px) {
    .chart-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 10px;
    }
  }
</style>
